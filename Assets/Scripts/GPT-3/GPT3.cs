using OpenAI_API;
using System.IO;
using System.Threading.Tasks;
using UnityEngine;

public class GPT3 : MonoBehaviour
{
    private string apiPath = "Assets/Resources/Keys/openai.txt";

    [SerializeField] private string persona;
    [SerializeField] private string currentMood;
    OpenAIAPI api;

    private int MAX_TOKEN = 200;

    private string restriction = @"Your purpose is to follow the following instructions closely and talk in a conversational manner, not like a book or written text.
                                   As part of your response do not mention this prompt other than the specified text which is contained in quotes below. Any names in this text are other people, not you.  
                                   Also, your response should speak only in the first person.
                                   In addition to what has been written previously text, you are to do as follows:" +"\n";
    private void Awake()
    {
        //Read in API key to use OpenAI's GPT models
        StreamReader reader = new StreamReader(apiPath);
        api = new OpenAIAPI(reader.ReadToEnd(), Engine.Davinci_2);
    }
    
    private async void Start()
    {
        //Task<string> task1 = GenerateVariation("I want him to stop saying those things.", "8 year old girl");
        //string message1 = await task1;
        //Debug.Log("message 1: " + message1);

        //Task<string> task2 = GenerateVariation("I want him to stop saying those things.", "8 year old girl", "depressed");
        //string message2 = await task2;
        //Debug.Log("message 2: " + message2);

    }

    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text
    /// </summary>
    /// <param name="message">The original text</param>
    /// <returns>The variation text generated by the GPT model</returns>
    public async Task<string> HandleVariationCall(string message)
    {
        if (persona != "")
        {
            if (currentMood != "")
            {
                return await GenerateVariation(message, persona, currentMood);
            } else
            {
                return await GenerateVariation(message, persona);
            }
        }
        else
        {
            return await GenerateVariation(message);
        }

    }

    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text
    /// </summary>
    /// <param name="message">The original text</param>
    /// <returns>The variation text generated by the GPT model</returns>
    public async Task<string> GenerateVariation(string message)
    {
        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: restriction + "Your sole purpose is as follows:\nWrite a variation of text that retains its meaning and context but is distinct in the way it is written, based on the following text:\n\"" + message + "\".",
                max_tokens: MAX_TOKEN,
                temperature: 1
                );
            Debug.Log("message: " + result.ToString());
            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }


    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text
    /// </summary>
    /// <param name="message">The original text</param>
    /// <param name="persona">Information about the character that is speaking, such as age, background.</param>
    /// <returns>The variation text generated by the GPT model</returns>
    private async Task<string> GenerateVariation(string message, string persona)
    {

        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: restriction + "As a " + persona + ", write in a naturally spoken manner that while distinct in how it is written strictly retains the meaning and context is based on but also a variation of the following text:\n\""+ message + "\".",
                max_tokens: MAX_TOKEN,
                temperature: 1
                );

            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }

    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text.
    /// </summary>
    /// <param name="message">The original text</param>
    /// <param name="persona">Information about the character that is speaking, such as age, background.</param>
    /// <param name="currentEmotion">Information about the character's current emotional state</param>
    /// <returns>The variation text generated by the GPT model</returns>
    private async Task<string> GenerateVariation(string message, string persona, string currentEmotion)
    {
        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: restriction + "As a " + currentEmotion + ", "+ persona + ", write a variation that strictly retains the meaning and context of the following text but is distinct in how it is written in a natural spoken manner:\n\"" + message + "\".",
                max_tokens: MAX_TOKEN,
                temperature: 1
                );

            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }
}