using OpenAI_API;
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using UnityEngine;

public class GPT3 : MonoBehaviour
{
    private string apiPath = "Assets/Resources/Keys/openai.txt";

    [SerializeField] private string persona;
    [SerializeField] private string currentMood;
    OpenAIAPI api;

    private int MAX_TOKEN = 200;

    private string restriction = @"The following is for a conversation that you are having with the user, write in a spoken manner in first person.
                                   You have a virtual avatar, so please do not write descriptive text.
                                   For your prompt, only reference the quoted text, everything else is instructional so as to help construct your response. 
                                   Any names in this text are other people, not you, nor the person you are speaking to.  
                                   In addition, follow these next instructions closely:" +"\n";
    private void Awake()
    {
        //Read in API key to use OpenAI's GPT models
        StreamReader reader = new StreamReader(apiPath);
        api = new OpenAIAPI(reader.ReadToEnd(), Engine.Davinci_2);
    }
    
    private async void Start()
    {
        //Task<string> task1 = GenerateVariation("I want him to stop saying those things.", "8 year old girl");
        //string message1 = await task1;
        //Debug.Log("message 1: " + message1);

        //Task<string> task2 = GenerateVariation("I want him to stop saying those things.", "8 year old girl", "depressed");
        //string message2 = await task2;
        //Debug.Log("message 2: " + message2);

    }

    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text
    /// </summary>
    /// <param name="message">The original text</param>
    /// <returns>The variation text generated by the GPT model</returns>
    public async Task<string> HandleVariationCall(string message)
    {
        if (persona != "")
        {
            if (currentMood != "")
            {
                return await GenerateVariation(message, persona, currentMood);
            } else
            {
                return await GenerateVariation(message, persona);
            }
        }
        else
        {
            return await GenerateVariation(message);
        }

    }

    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text
    /// </summary>
    /// <param name="message">The original text</param>
    /// <returns>The variation text generated by the GPT model</returns>
    public async Task<string> GenerateVariation(string message)
    {
        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: restriction + "Your sole purpose is as follows:\n Write in a naturally spoken manner that is distinct in how it is written, strictly retains the meaning and context is based on but also is a variation of the following text:\n\"" + message + "\".",
                max_tokens: MAX_TOKEN,
                temperature: 0.9
                );
            Debug.Log("message: " + result.ToString());
            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }


    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text
    /// </summary>
    /// <param name="message">The original text</param>
    /// <param name="persona">Information about the character that is speaking, such as age, background.</param>
    /// <returns>The variation text generated by the GPT model</returns>
    private async Task<string> GenerateVariation(string message, string persona)
    {

        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: restriction + "You are a " + persona + ", write in a naturally spoken manner that is distinct in how it is written, strictly retains the meaning and context is based on but also is a variation of the following text:\n\""+ message + "\".",
                max_tokens: MAX_TOKEN,
                temperature: 0.9
                );

            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }

    /// <summary>
    /// Pass a given piece of text to a GPT model and have it generate a different but similar in meaning text.
    /// </summary>
    /// <param name="message">The original text</param>
    /// <param name="persona">Information about the character that is speaking, such as age, background.</param>
    /// <param name="currentEmotion">Information about the character's current emotional state</param>
    /// <returns>The variation text generated by the GPT model</returns>
    private async Task<string> GenerateVariation(string message, string persona, string currentEmotion)
    {
        //Call on the API to generate a variation of the given text
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: restriction + "You are a " + currentEmotion + ", "+ persona + ", write in a naturally spoken manner that is distinct in how it is written, strictly retains the meaning and context is based on but also is a variation of the following text:\n\"" + message + "\".",
                max_tokens: MAX_TOKEN,
                temperature: 0.9
                );

            return result.ToString();
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        return "If you are hearing this, then there has been an error when using the generate variation function for GPT-3.";
    }

    public async Task<string> GetSentiment(string text)
    {
        try
        {
            var result = await api.Completions.CreateCompletionAsync(
                prompt: "You are to classify the sentiment into one of four categories: positive, negative, aggressive, or neutral. If anything falls outside this, classify it as neutral. The text you are classifying the sentiment of is: \"" + text + "\". DO NOT reply with more than one word when classifying the sentiment. DO NOT include any additional text other than the sentiment in your response.",
                max_tokens: 15,
                temperature: 0.2
                );

            string sentiment = RemoveWhitespace(result.ToString());

            Debug.Log("sentiment: " + sentiment);

            return sentiment;
        }
        catch (System.Exception e)
        {
            Debug.LogError(e.Message);
        }
        //In the event of an error, return neutral
        return "error =(";
    }

    public static string RemoveWhitespace(string input)
    {
        return new string(input.ToCharArray().Where(c => !Char.IsWhiteSpace(c))
            .ToArray());
    }
}